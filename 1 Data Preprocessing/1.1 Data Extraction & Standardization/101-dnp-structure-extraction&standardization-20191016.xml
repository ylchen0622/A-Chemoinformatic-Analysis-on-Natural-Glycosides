<?xml version="1.0" encoding="UTF-8"?>
<sci:data xmlns:sci="http://www.SciTegic.com/" object="SciTegic.Protocol.1" format="8.0.0">
	<sci:dbitem>
		<sci:component name="101-dnp-structure-extraction&amp;standardization-20191016" version="2">
			<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;A comma delimited list of global properties, each of which will automatically hold the name of a file in the job&apos;s temporary folder, whose name is guaranteed to be unique.&lt;/p&gt;

&lt;p&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold just the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
			</sci:arg>
			<sci:arg name="Protocol Form" type="ProtocolType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;The path to a protocol that will render an HTML user interface for this protocol.  This optional parameter is used by Web Port to provide a custom user interface for a protocol.&lt;/p&gt;</sci:help>
			</sci:arg>
			<sci:arg name="Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>The Run On Grid parameter tells the server to run the protocol on the grid engine if SES is configured to run with grid integration.</sci:help>
				<sci:member>Queue Name</sci:member>
				<sci:legalval>True</sci:legalval>
				<sci:legalval selected="true">False</sci:legalval>
			</sci:arg>
			<sci:arg name="Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="true">
				<sci:help>The Queue Name allows you to specify the name of the queue on the grid engine to submit the job to. Leave blank to specify the default queue.</sci:help>
				<sci:enabledscript>parameter(&apos;Run On Grid&apos;);</sci:enabledscript>
			</sci:arg>
			<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
				<sci:help>Component Attributes</sci:help>
				<sci:legalval>ComponentTakesInput</sci:legalval>
				<sci:legalval>ComponentReturnsPass</sci:legalval>
				<sci:legalval>ComponentReturnsFail</sci:legalval>
				<sci:legalval>ComponentRunsLocal</sci:legalval>
			</sci:arg>
			<sci:arg name="Reporting" type="GroupType" required="false" visibility="visible" multi="false" expanded="true" uimpl="true">
				<sci:help>This group contains parameters specific to protocols containing Reporting components.</sci:help>
				<sci:member>Reporting Stylesheet</sci:member>
			</sci:arg>
			<sci:arg name="Reporting Stylesheet" type="StylesheetType" required="false" visibility="visible" multi="false" expanded="true" uimpl="true">
				<sci:help>Specifies the name of a Stylesheet to be used by this protocol if any of the Reporting components have a Style selected in the &lt;i&gt;Format&lt;/i&gt; and &lt;i&gt;Position&lt;/i&gt; parameters.</sci:help>
				<sci:value>{D1AB276B-381E-4b8e-9244-37D49F7C11BF}</sci:value>
			</sci:arg>
			<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
				<sci:legalval selected="true">Halt</sci:legalval>
				<sci:legalval>Fail</sci:legalval>
				<sci:legalval>Pass</sci:legalval>
			</sci:arg>
			<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
				<sci:legalval selected="true">Halt</sci:legalval>
				<sci:legalval>Fail</sci:legalval>
				<sci:legalval>Pass</sci:legalval>
			</sci:arg>
			<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
			<sci:arg name="WebExports" type="StringType" required="false" visibility="nevershow" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;A comma delimited list of global properties which will be automatically 
exported if this protocol is published as a web service.&lt;/p&gt;

&lt;p&gt;Each global property in the list is created with an empty value at the start of the protocol run.&lt;/p&gt;</sci:help>
			</sci:arg>
			<sci:arg name="Keep Alive" type="BoolType" required="false" visibility="nevershow" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;Specifies if the process where this protocol is run should stay around for later use.&lt;/p&gt;</sci:help>
				<sci:legalval selected="true">True</sci:legalval>
				<sci:legalval>False</sci:legalval>
			</sci:arg>
			<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The user who registered this component.</sci:help>
				<sci:value>YY</sci:value>
			</sci:arg>
			<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The date this component was registered.</sci:help>
				<sci:value>Fri Aug 05 16:16:07 2022</sci:value>
			</sci:arg>
			<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The server version when this component was registered</sci:help>
				<sci:value>16.1.0.1140</sci:value>
			</sci:arg>
			<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>2016dnp-structure-extraction&amp;standardization</sci:value>
			</sci:arg>
			<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol AutoLayout</sci:help>
				<sci:value>0</sci:value>
			</sci:arg>
			<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
				<sci:value>PROTOCOLNODE</sci:value>
			</sci:arg>
			<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
				<sci:help>Component Revision</sci:help>
				<sci:value>790</sci:value>
			</sci:arg>
			<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>{80062133-B368-47BB-B490-B758142F94A7}</sci:value>
			</sci:arg>
			<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
				<sci:help>By Ref</sci:help>
				<sci:value>0</sci:value>
			</sci:arg>
			<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
				<sci:value>100</sci:value>
				<sci:value>2016dnp-structure-extraction&amp;standardization</sci:value>
				<sci:value/>
				<sci:value>None</sci:value>
				<sci:value/>
				<sci:value>None</sci:value>
				<sci:value/>
				<sci:value>None</sci:value>
				<sci:value/>
			</sci:arg>
			<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
			<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol Scale</sci:help>
				<sci:value>100</sci:value>
			</sci:arg>
			<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol Sticky Notes</sci:help>
			</sci:arg>
			<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol Options</sci:help>
				<sci:legalval>Owner Access Only</sci:legalval>
			</sci:arg>
			<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
				<sci:value>0</sci:value>
			</sci:arg>
			<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
				<sci:help>Local Component Identifier</sci:help>
				<sci:value>-1</sci:value>
			</sci:arg>
			<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>50 -50</sci:value>
			</sci:arg>
			<sci:arg name="OriginalPackage" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>OriginalPackage</sci:help>
				<sci:value>scitegic/coreutils</sci:value>
			</sci:arg>
			<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The original path within the database of this component.</sci:help>
				<sci:value>Unknown</sci:value>
			</sci:arg>
		</sci:component>
		<sci:protocol>
			<sci:data object="SciTegic.XMLReader.1">
				<sci:component name="XML Reader (Generic)" version="2">
					<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true">
						<sci:help>&lt;p&gt;
The name or path name for the source data. The source can be a file, a network resource, a data record property, or a global property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;Use a file path name for files&lt;/li&gt;
&lt;li&gt;Use a network URL for network resources&lt;/li&gt;
&lt;li&gt;Use &quot;global://property-name&quot; for global properties&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
						<sci:member>Maximum</sci:member>
						<sci:member>SourceTag</sci:member>
						<sci:member>Keep Properties</sci:member>
						<sci:value>C:\Users\DELL\Desktop\Paper\Natural Products\1 Data Preprocess\1.1 Data Standard\CRCN-INCHI-2.txt</sci:value>
					</sci:arg>
					<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The maximum number of data records to read.</sci:help>
					</sci:arg>
					<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false" uimpl="false">
						<sci:help>The type of tag to create to identify the source of data records. A property called &quot;SourceTag&quot; is created and holds the value indicated.

 - None: No SourceTag property is created and any existing ones are removed.

 - Filename: The name of the file read.

 - FilenameAndExtension: The name of the file read with its file extension.

 - FullFilename: The name of the file read, including the directory path.

 - ZipFilename: When reading a compressed zip file, the filename within the compressed archive.

 - Number: When multiple files are read in this component, they are numbered 1,2,3...

 - Letter: When multiple files are read in this component, they are lettered A, B, C...

 - KeepCurrent: Keeps the current value of SourceTag.
</sci:help>
						<sci:legalval selected="true">None</sci:legalval>
						<sci:legalval>Filename</sci:legalval>
						<sci:legalval>FilenameAndExtension</sci:legalval>
						<sci:legalval>FullFilename</sci:legalval>
						<sci:legalval>ZipFilename</sci:legalval>
						<sci:legalval>Number</sci:legalval>
						<sci:legalval>Letter</sci:legalval>
						<sci:legalval>KeepCurrent</sci:legalval>
					</sci:arg>
					<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>A list of properties the reader should retain for each data record that is output. If a value is not defined, retains all properties. If the parameter contains the value &quot;-&quot; (minus sign), properties are not retained.  This parameter is ignored if &lt;i&gt;Preserve Hierarchy&lt;/i&gt; is &apos;True&apos;.
</sci:help>
						<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Preserve Hierarchy to false.&quot;);
Parameter(&apos;Preserve Hierarchy&apos;) = false;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="XML Repeat Tag" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>This parameter specifies the tag for the identification of an individual record. If this tag appears multiple times in the document, multiple data records are returned, one for each tag occurrence. If a tag is not specified, the entire document is read into a single record.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;When encountering nested repeat tag elements, only the top level entry will be returned. For example, 
if the repeat tag is &quot;category&quot;, the following XML will return a single record:&lt;br&gt;
&lt;code&gt;
&amp;lt;category name=&amp;quot;sec1&amp;quot;&amp;gt;&amp;lt;category name=&amp;quot;sec1-3&amp;quot;&amp;gt;&amp;lt;/category&amp;gt;&amp;lt;/category&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;</sci:help>
						<sci:member>XML Repeat Level</sci:member>
						<sci:value>entry</sci:value>
					</sci:arg>
					<sci:arg name="XML Repeat Level" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>This parameter specifies an optional level to restrict the search for repeat tags that delimit
individual records appearing in the XML document. When specified, if multiple repeat tag elements appear at this level in the document, multiple data records are returned, one for each occurrence. If the tag level is left blank, the repeat tags can occur at any level of the XML hierarchy.
&lt;p&gt;
</sci:help>
					</sci:arg>
					<sci:arg name="Properties Are" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>How to create properties from the information in the XML document. If Properties Are Attributes, then attributes in the document become properties on the node associated with the owning element. If Properties Are Leaf Elements, then elements without children (i.e., &quot;leaf elements&quot;) become properties, with the property name taken from the element name, and the value from the text content.</sci:help>
						<sci:legalval selected="true">Attributes</sci:legalval>
						<sci:legalval>Leaf Elements</sci:legalval>
					</sci:arg>
					<sci:arg name="Preserve Hierarchy" type="BoolType" required="false" visibility="visible" multi="false">
						<sci:help>If True, the XML hierarchy is preserved as a series of data nodes and properties within each data record (which can then be accessed as deep properties).  If False, the XML hierarchy is flattened into a series of top level properties.  When False, options for whether and how to pad missing values and attributes can be specified as well.
&lt;p&gt;
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;For manipulating hierarchical data records, see the components under Data Access and Manipulation/Utilities/Data Tree Manipulators.
&lt;/ul&gt;</sci:help>
						<sci:member>Pad Missing Values</sci:member>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Pad Missing Values" type="BoolType" required="false" visibility="visible" multi="false">
						<sci:help>When &lt;b&gt;Preserve Hierarchy&lt;/b&gt; is false, multiple tags with the same name in the same tree are created as array properties.  If this parameter is true, any difference in the number of tags at a specific depth will be corrected by padding the arrays with the string given in &lt;b&gt;Padding Text&lt;/b&gt;.

For example, given the following XML snippet:
&lt;pre&gt;
&amp;lt;a&amp;gt;&lt;br&gt;
	&amp;lt;b&amp;gt;abc&amp;lt;/b&amp;gt;&lt;br&gt;
	&amp;lt;b&amp;gt;def&amp;lt;/b&amp;gt;&lt;br&gt;
	&amp;lt;c&amp;gt;123&amp;lt;/c&amp;gt;&lt;br&gt;
&amp;lt;/a&amp;gt;&lt;br&gt;
&amp;lt;a&amp;gt;&lt;br&gt;
	&amp;lt;b&amp;gt;ghi&amp;lt;/b&amp;gt;&lt;br&gt;
	&amp;lt;d&amp;gt;456&amp;lt;/d&amp;gt;&lt;br&gt;
&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/pre&gt;

With &lt;b&gt;Pad Missing Values&lt;/b&gt; set to &lt;i&gt;False&lt;/i&gt;, these properties will be generated:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;a/b&lt;/b&gt;: Array with 3 items: [&apos;abc&apos;, &apos;def&apos;, &apos;ghi&apos;]
&lt;li&gt;&lt;b&gt;a/c&lt;/b&gt;: String with 1 item: &apos;123&apos;
&lt;li&gt;&lt;b&gt;a/d&lt;/b&gt;: String with 1 item: &apos;456&apos;
&lt;/ul&gt;
&lt;p&gt;With &lt;b&gt;Pad Missing Values&lt;/b&gt; set to &lt;i&gt;True&lt;/i&gt;, these properties will be generated instead:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;a/b&lt;/b&gt;: Array with 3 items: [&apos;abc&apos;, &apos;def&apos;, &apos;ghi&apos;]
&lt;li&gt;&lt;b&gt;a/c&lt;/b&gt;: Array with 3 items: [&apos;123&apos;, &apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;]
&lt;li&gt;&lt;b&gt;a/d&lt;/b&gt;: Array with 3 items: [&apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;, &apos;456&apos;]
&lt;/ul&gt;
</sci:help>
						<sci:member>Padding Text</sci:member>
						<sci:member>Pad Attributes</sci:member>
						<sci:enabledscript>SetDisabledDetails(&quot;Only enabled if Preserve Hierarchy is false&quot;);
not Parameter(&quot;Preserve Hierarchy&quot;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Padding Text" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>The string to use when padding arrays.  By default, this is an empty string.  However, if this causes confusion within your XML data, you might wish to customize the string to something that can be uniquely identified.</sci:help>
						<sci:enabledscript>SetDisabledDetails(&apos;Only enabled if Pad Missing Values is True and Preserve Hierarchy is false&apos;);
Parameter(&apos;Pad Missing Values&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Pad Attributes" type="BoolType" required="false" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;When flattening XML structures, in addition to padding missing tag values, it is often essential to pad attribute properties as well so that nested tags match up with their parent tag&apos;s attribute values.  For instance, consider the following XML snippet:
&lt;p&gt;
&lt;pre&gt;
&amp;lt;a name=&quot;title&quot; source=&quot;file&quot;&amp;gt;
	&amp;lt;b&amp;gt;abc&amp;lt;/b&amp;gt;
	&amp;lt;b&amp;gt;def&amp;lt;/b&amp;gt;
	&amp;lt;c&amp;gt;123&amp;lt;/c&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;a name=&quot;author&quot; location=&quot;San Diego&quot;&amp;gt;
	&amp;lt;b&amp;gt;ghi&amp;lt;/b&amp;gt;
	&amp;lt;d&amp;gt;456&amp;lt;/d&amp;gt;
&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;With &lt;b&gt;Pad Attributes&lt;/b&gt; set to &lt;i&gt;False&lt;/i&gt;, these properties will be generated:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;a.name&lt;/b&gt;: Array with 2 items: [&apos;title&apos;, &apos;author&apos;]
&lt;li&gt;&lt;b&gt;a.source&lt;/b&gt;: String with 1 item: &apos;file&apos;
&lt;li&gt;&lt;b&gt;a.location&lt;/b&gt;: String with 1 item: &apos;San Diego&apos;
&lt;li&gt;&lt;b&gt;a/b&lt;/b&gt;: Array with 3 items: [&apos;abc&apos;, &apos;def&apos;, &apos;ghi&apos;]
&lt;li&gt;&lt;b&gt;a/c&lt;/b&gt;: Array with 3 items: [&apos;123&apos;, &apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;]
&lt;li&gt;&lt;b&gt;a/d&lt;/b&gt;: Array with 3 items: [&apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;, &apos;456&apos;]
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;With &lt;b&gt;Pad Attributes&lt;/b&gt; set to &lt;i&gt;True&lt;/i&gt;, these properties will be generated:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;a.name&lt;/b&gt;: Array with 3 items: [&apos;title&apos;, &apos;title&apos;, &apos;author&apos;]
&lt;li&gt;&lt;b&gt;a.source&lt;/b&gt;: Array with 3 items: [&apos;file&apos;, &apos;file&apos;, &apos;PADDING STRING&apos;]
&lt;li&gt;&lt;b&gt;a.location&lt;/b&gt;: Array with 3 items: [&apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;, &apos;San Diego&apos;]
&lt;li&gt;&lt;b&gt;a/b&lt;/b&gt;: Array with 3 items: [&apos;abc&apos;, &apos;def&apos;, &apos;ghi&apos;]
&lt;li&gt;&lt;b&gt;a/c&lt;/b&gt;: Array with 3 items: [&apos;123&apos;, &apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;]
&lt;li&gt;&lt;b&gt;a/d&lt;/b&gt;: Array with 3 items: [&apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;, &apos;456&apos;]
&lt;/ul&gt;
</sci:help>
						<sci:enabledscript>SetDisabledDetails(&apos;Only enabled if Pad Missing Values is True and Preserve Hierarchy is false&apos;);
Parameter(&apos;Pad Missing Values&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval>ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Tue Oct 04 09:48:48 2011</sci:value>
					</sci:arg>
					<sci:arg name="OnlyGenericData" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>OnlyGenericData</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{93C4D73F-0B4D-03F4-B0E3-D82C4FE04C6F}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>XML Reader (Generic)</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>90 -270</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DOCUMENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>XML Reader (Generic)</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Reads data from generic XML files</sci:value>
						<sci:value>&lt;p&gt;This generic reader is designed for free-form XML from any source. The component reads the XML files specified by &lt;i&gt;Source&lt;/i&gt; and outputs data records in either a full hierarchical form or in a
flattened form with property names representing hierarchical paths.&lt;/p&gt;
&lt;p&gt;The XML is broken into separate records based on the value of &lt;i&gt;XML Repeat Tag&lt;/i&gt;. The XML between each of these tags up to its corresponding closing tag is treated as a single data record.&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Record Flattening&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
When &lt;i&gt;Preserve Hierarchy&lt;/i&gt; is set to False, the XML data is flattened into a single set of properties constructed by stringing together the element names delimited by a forward slash.
In this flattening case,  
&lt;i&gt;Pad Missing Values&lt;/i&gt; and its grouped parameters determine whether and how to fill in missing tags and attributes.&lt;/p&gt;
&lt;p&gt;
Where there are repeating XML elements within a data record, the text values with the same property name become items in a single array property.
&lt;/p&gt;&lt;p&gt;&lt;i&gt;Example input file:&lt;/i&gt;&lt;/p&gt;
Consider reading in the following XML:
&lt;code&gt;&lt;pre&gt;
&amp;lt;world&amp;gt;
  &amp;lt;region&amp;gt;
    &amp;lt;city&amp;gt;New York&amp;lt;/city&amp;gt;
  &amp;lt;/region&amp;gt;
  &amp;lt;region&amp;gt;
    &amp;lt;city&amp;gt;London&amp;lt;/city&amp;gt;
    &amp;lt;city&amp;gt;Berlin&amp;lt;/city&amp;gt;
    &amp;lt;city&amp;gt;Paris&amp;lt;/city&amp;gt;
  &amp;lt;/region&amp;gt;
  &amp;lt;region&amp;gt;
    &amp;lt;city&amp;gt;Tokyo&amp;lt;/city&amp;gt;
  &amp;lt;/region&amp;gt;
&amp;lt;/world&amp;gt;
&lt;/pre&gt;&lt;/code&gt;
&lt;p&gt;
If you specify &quot;region&quot; as the &lt;i&gt;XML Repeat Tag&lt;/i&gt;, then
this component splits the XML document into three records,
each containing a property named &lt;b&gt;world/region/city&lt;/b&gt;. 
In the case of the second record, this is a three-item 
array property.&lt;/p&gt;

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;i&gt;Preserve Hierarchy&lt;/i&gt; is False, XML attributes also become properties. In this case, the property name follows the same scheme as the text value properties, but the final attribute name is delimited by a period (&quot;.&quot;). For example, the element &lt;code&gt;&amp;lt;city latitude=&quot;40.77&quot;&amp;gt;&lt;/code&gt; would result in a property named &lt;b&gt;world/region/city.latitude&lt;/b&gt; with value &quot;40.77&quot;.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;XML Repeat Tag&lt;/i&gt; should include a prefix if there is one in the tag. For example, if the element is written as &lt;code&gt;&amp;lt;b:species&amp;gt;&lt;/code&gt;, define the tag as &quot;b:species&quot;.&lt;/li&gt;
&lt;li&gt;When encountering nested repeat tag elements, only the top level entry will be returned. For example, 
if the repeat tag is &quot;category&quot;, the following XML will return a single record:&lt;br&gt;
&lt;code&gt;
&amp;lt;category name=&amp;quot;sec1&amp;quot;&amp;gt;&amp;lt;category name=&amp;quot;sec1-3&amp;quot;&amp;gt;&amp;lt;/category&amp;gt;&amp;lt;/category&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Note that there is an &lt;i&gt;XML Writer (Generic)&lt;/i&gt; component
to write out an XML representation of the data records passed to it.&lt;/li&gt; 
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;For reading XML files in the SciTegic format, use &lt;a href=&quot;javascript:DoLink(&apos;{C887E992-CF11-42cd-B499-6B7F75D47D42}&apos;)&quot;&gt;XML Reader (SciTegic)&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>8.5.0.200</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>5</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\File Readers\XML Reader (Generic)</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.CountRecords.1">
				<sci:component name="Count and Index Data" version="2">
					<sci:arg name="Counter Property" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;The name of the property to hold the data record count. If the name begins with &quot;@&quot;, this is a global property name and is updated each time a data record is received. Otherwise, it is a local property name and a new property by that name will be created on each data record and given the current value (i.e., the count).&lt;/p&gt;

</sci:help>
						<sci:member>Start Index</sci:member>
						<sci:member>Check if Property Already in Use</sci:member>
						<sci:value>Index</sci:value>
					</sci:arg>
					<sci:arg name="Start Index" type="LongType" required="true" visibility="visible" multi="false">
						<sci:help>The index (i.e., number) used to start the sequence.</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="Check if Property Already in Use" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>Generates an error if the property already exists. This helps prevent overwriting data created by another component. Default is &quot;True&quot;.
</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Fri Sep 08 07:31:45 2006</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{7BF3D951-BF75-70A2-8B2C-AD8909791909}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Count and Index Data</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>COMPONENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Count and Index Data</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>378 -270</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Counts the number of data records and puts the count in a property</sci:value>
						<sci:value>&lt;p&gt;Use this component to create a numerical index of data records and to keep track of the total number of records.  The value of &lt;i&gt;Counter Property&lt;/i&gt; is incremented each time a data record enters the component.&lt;/p&gt;

&lt;p&gt;This component can be used in two modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;i&gt;Counter Property&lt;/i&gt; is the name of a local property (does not start with &quot;@&quot;), a new property by that name is created on each data record and given the value of the current count.&lt;/li&gt;
&lt;li&gt;If &lt;i&gt;Counter Property&lt;/i&gt; is the name of a global property (starts with &quot;@&quot;), then each data record that passes through causes this global record count to be incremented, but values are not added to the passing records.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>6.0.0.44</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>6</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Manipulators\Count and Index Data</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.MergeProperties.1">
				<sci:component name="Merge Data" version="2">
					<sci:arg name="MergeUsing" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;Name of the property (or a comma-separated list of properties) that will be used to merge on.  Data records having the same value for this property will be merged.  This property must contain scalar (i.e., non-array) data.

&lt;p&gt;If multiple properties are specified, the values must be the same for all of the properties (unless &lt;i&gt;MergeUsingListType&lt;/i&gt; is set to UseFirstDefinedValue).&lt;/p&gt;
</sci:help>
						<sci:member>MergeUsingListType</sci:member>
						<sci:member>MergePropertyType</sci:member>
						<sci:member>AcceptNonNumericStringsAsNumbers</sci:member>
						<sci:member>IgnoreCase</sci:member>
						<sci:value>Index</sci:value>
					</sci:arg>
					<sci:arg name="MergeUsingListType" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;How &lt;i&gt;MergeUsing&lt;/i&gt; properties are interpreted when more than one property is listed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UseFirstDefinedValue: Use only the first property in the list that has a defined value for a record as the merge key.&lt;/li&gt;
&lt;li&gt;UseAllValues: Use the concatentation of values of all properties listed as the merge key.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
						<sci:legalval>UseFirstDefinedValue</sci:legalval>
						<sci:legalval selected="true">UseAllValues</sci:legalval>
					</sci:arg>
					<sci:arg name="MergePropertyType" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;The types of values found in the property specified by &lt;i&gt;MergeUsing&lt;/i&gt;:

&lt;ul&gt;
&lt;li&gt;IsNumeric: All numbers are converted to doubles for comparison (e.g., 1 = 1.0).&lt;/li&gt;
&lt;li&gt;IsText: All comparisons are made as string values.&lt;/li&gt;
&lt;li&gt;IsDate: The key is considered a date.&lt;/li&gt;
&lt;li&gt;IsFingerprint: The key is considered a fingerprint.  Fingerprint bits are sorted before making the comparison.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
						<sci:legalval>IsNumeric</sci:legalval>
						<sci:legalval selected="true">IsText</sci:legalval>
						<sci:legalval>IsDate</sci:legalval>
						<sci:legalval>IsFingerprint</sci:legalval>
					</sci:arg>
					<sci:arg name="IgnoreCase" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;Considers lower-case and upper-case letters as equivalent when determining the identity of &lt;i&gt;MergeUsing&lt;/i&gt; property values.&lt;/p&gt;
</sci:help>
						<sci:enabledscript>SetDisabledDetails(&apos;To enable, set MergePropertyType to IsText&apos;);
Parameter(&apos;MergePropertyType&apos;) eq &apos;IsText&apos;</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="MergeBehavior" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;Controls how properties, other than the &lt;i&gt;MergeUsing&lt;/i&gt; property, are handled.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;KeepAll: Keeps all property values by appending values into an array.&lt;/li&gt;
&lt;li&gt;KeepFirst: Keeps only the properties and values from the first example received.  All properties and values from subsequent records matching the property specified by &lt;i&gt;MergeUsing&lt;/i&gt; are discarded.&lt;/li&gt;
&lt;/ul&gt; 
</sci:help>
						<sci:member>WhenMerging</sci:member>
						<sci:member>KeepAllNullString</sci:member>
						<sci:member>KeepAllPreferredNodeName</sci:member>
						<sci:member>PrefixUsingProperty</sci:member>
						<sci:member>Data Are Sorted</sci:member>
						<sci:legalval selected="true">KeepAll</sci:legalval>
						<sci:legalval>KeepFirst</sci:legalval>
					</sci:arg>
					<sci:arg name="WhenMerging" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;When merging using KeepAll behavior, provides fine control over how multiple values are treated.&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;OverwriteOrCreate: Copies all properties of each merged record sequentially, overwriting any values that may already exist (instead of generating an array).&lt;/li&gt;
&lt;li&gt;OverwriteExisting: Only copies properties that already exist on the first merged record, overwriting those original values (instead of creating an array).&lt;/li&gt;
&lt;li&gt;CreateIfNew: Leaves any existing properties alone, and writes only new properties.&lt;/li&gt;
&lt;li&gt;AppendOrCreate: Appends (as an array) if a property already exists, otherwise creates it.&lt;/li&gt;
&lt;li&gt;AppendExisting: Appends (as an array) only to currently existing properties, and discards other new property values.&lt;/li&gt;
&lt;/ul&gt;


</sci:help>
						<sci:legalval>OverwriteOrCreate</sci:legalval>
						<sci:legalval>OverwriteExisting</sci:legalval>
						<sci:legalval>CreateIfNew</sci:legalval>
						<sci:legalval selected="true">AppendOrCreate</sci:legalval>
						<sci:legalval>AppendExisting</sci:legalval>
					</sci:arg>
					<sci:arg name="KeepAllNullString" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;This string is used during append using KeepAll &lt;i&gt;MergeBehavior&lt;/i&gt; to pad out empty values. It keeps the number of values of generated arrays of values the same, and in sync, for multiple samples. The default value is None, which causes no padding to occur.&lt;/p&gt;
</sci:help>
						<sci:enabledscript>SetDisabledDetails(&apos;To enable, set MergeBehavior to KeepAll&apos;);
Parameter(&apos;MergeBehavior&apos;) eq &apos;KeepAll&apos;</sci:enabledscript>
						<sci:value>None</sci:value>
					</sci:arg>
					<sci:arg name="KeepAllPreferredNodeName" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;If defined, and &lt;i&gt;MergeBehavior&lt;/i&gt; is KeepAll, this contains a name that is used to prioritize which underlying data record should be kept.  If not defined, the first record with a given merge value is kept; if this is defined, and at least one of the data records contains a node of this type, then the first example of that type is kept.&lt;/p&gt;</sci:help>
						<sci:enabledscript>SetDisabledDetails(&apos;To enable, set MergeBehavior to KeepAll&apos;);
Parameter(&apos;MergeBehavior&apos;) eq &apos;KeepAll&apos;</sci:enabledscript>
						<sci:value>Molecule</sci:value>
					</sci:arg>
					<sci:arg name="PrefixUsingProperty" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;When multiple values for a property are retained (under KeepAll merge behavior), the original property name is prefixed differently for each original value it must hold. The prefix is constructed from the value of this property, followed by an underscore.
When not specified, a prefix is not used and multiple values are separated as an array (such as property[1], property[2], etc).&lt;/p&gt;


</sci:help>
					</sci:arg>
					<sci:arg name="Data Are Sorted" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Specifies whether the input data are already sorted by the &lt;i&gt;MergeUsing&lt;/i&gt; properties. If so, then the merge can be done much faster with less memory impact. Use this option only if you are certain that the input data are sorted.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;If you set &lt;i&gt;Data Are Sorted&lt;/i&gt; to True and the input data are &lt;b&gt;not&lt;/b&gt; sorted, an error is generated.
&lt;/ul&gt;</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="OutputFrequency" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;Add a property called &quot;Frequency&quot; that contains the number of individual records included in the resulting merged record.&lt;/p&gt;
</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="AcceptNonNumericStringsAsNumbers" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Determines whether &lt;b&gt;all&lt;/b&gt; string values for the MergeUsing property -- even non-numeric ones such as &apos;abc&apos; or &apos;1.0c&apos; -- will be coerced to numbers when  MergePropertyType is set to IsNumeric.  

If set to True, then a string such as &apos;abc&apos; that does not begin with a numeric portion will be coerced to zero, while a string such as &apos;1.0c&apos; that begins with a numeric portion will be coerced to the corresponding number (in this case 1.0).  

If set to False, then records containing non-numeric strings for the MergeUsing property will be sent out the Fail port.</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Tue Mar 15 13:01:38 2011</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Merge Data</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Merge Data</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>JOINNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{1E393621-138C-466E-8A2B-275A3FAB26E3}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>666 -420</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Merges properties of all data records that share the same key property value into a single data record</sci:value>
						<sci:value>&lt;p&gt;Incoming data records are merged into a single data record if they have the same value for the &lt;i&gt;MergeUsing&lt;/i&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;MergeBehavior&lt;/i&gt; controls how properties, other than the &lt;i&gt;MergeUsing&lt;/i&gt; property, are handled.&lt;/p&gt;

&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;Multiple &lt;i&gt;MergeUsing&lt;/i&gt; properties can be specified.  In this case, data records are merged if the value for each &lt;i&gt;MergeUsing&lt;/i&gt; property matches across the data records.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;See Also: &lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you wish to merge records based on molecular structures, use &lt;a href=&quot;javascript:DoLink(&apos;{2E21E16B-6901-46F3-8780-F14D3D7057CE}&apos;)&quot;&gt;
Merge Molecules&lt;/a&gt; (which requires the Chemistry Collection).&lt;/p&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Data records that contain the properties being used for merging</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Data records that do not contain the properties being used for merging</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>8.4.5.20</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ReplaceNullsInFirstRecord" type="BoolType" required="false" visibility="nevershow" multi="false" uimpl="false">
						<sci:help>Specifies whether to replace nulls in the first merged record when KeepAllNullString is specified.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>7</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Manipulators\Merge Data</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.EvaluateExpression.1">
				<sci:component name="Custom Filter (PilotScript)" version="2">
					<sci:arg name="Expression" type="ExpressionType" required="true" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>The PilotScript expression used to filter the data.</sci:help>
						<sci:member>Initial Expression</sci:member>
						<sci:member>Final Expression</sci:member>
						<sci:member>Keep Calculated Properties</sci:member>
						<sci:value>Frequency = 2</sci:value>
					</sci:arg>
					<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>&lt;p&gt;
An expression evaluated only when the component
is first initialized (when the first data record enters).
&lt;p/&gt;
Since there is no data available at initialization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>&lt;p&gt;
An expression evaluated only when the
component is finalized (once the last data
record has passed).
&lt;p/&gt;
Since there is no data available at finalization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>Allows any properties that were calculated in
&quot;Expression&quot; to be included with the exiting
record.
Otherwise, these properties are removed after
the evaluation is complete.</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="ExpressionVersion" type="LongType" required="false" visibility="nevershow" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>Version of expression parser to use.</sci:help>
						<sci:value>2</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Mon Jan 21 09:57:16 2008</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;Expression&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>#displayName := trim(Parameter(&apos;Expression&apos;, 2));
if(strlength(#displayName) &gt; 0) then	
	/* Find the first line break */
	#nl := FindSubstring(#displayName, &quot;\r&quot;);
	if #nl &lt;= 0 then
		#nl := FindSubstring(#displayName, &quot;\n&quot;);
	end if;

	/* Keep the first line only */
	if (#nl &gt; 0) then
		StrErase(#displayName, #nl);
	end if;
	
	#displayName;
else
	&quot;&quot;;
end if;</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>FILTERNODE</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Custom Filter (PilotScript)</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{DD58ECD1-516F-48FE-A5DB-8328AED680F2}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>954 -420</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Passes data records for which a PilotScript expression evaluates to True

</sci:value>
						<sci:value>&lt;p&gt;For each incoming data record, the PilotScript statements in &lt;i&gt;Expression&lt;/i&gt; are evaluated. If the last statement in the expression evaluates to True or non-zero, the record is sent out the Pass port. Otherwise it is sent out the Fail port.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To initialize global variables such as counters, use &lt;i&gt;Initial Expression&lt;/i&gt;.&lt;/li&gt; 
&lt;li&gt;To clean up global variables or calculate final results use &lt;i&gt;Final Expression&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Parameters on Custom Manipulators do not become global variables that can be accessed via &lt;i&gt;@ParameterName&lt;/i&gt; syntax.  They must be accessed by using the &lt;i&gt;Parameter(&apos;ParameterName&apos;)&lt;/i&gt; function or by using token substitution via &lt;i&gt;$(ParameterName)&lt;/i&gt; syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Data records for which the final expression in the PilotScript evaluates to True or non-zero</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Data records for which the final expression in the PilotScript evaluates to False or zero</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>30</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Filters\Custom Filter (PilotScript)</sci:value>
					</sci:arg>
				</sci:component>
				<sci:proplist>
					<sci:propval name="RegistrationVersion">7.0.0.35</sci:propval>
				</sci:proplist>
			</sci:data>
			<sci:data object="SciTegic.EvaluateExpression.1">
				<sci:component name="Custom Manipulator (PilotScript)" version="2">
					<sci:arg name="Expression" type="ExpressionType" required="true" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Expression (or list of expressions separated by semi-colons) to evaluate.</sci:help>
						<sci:member>Initial Expression</sci:member>
						<sci:member>Final Expression</sci:member>
						<sci:member>Keep Calculated Properties</sci:member>
						<sci:value>rename(&quot;inchi.inchi&quot;,&quot;inchitemp&quot;);
inchi := strreplace(inchitemp,&quot;&lt;br/&gt;&quot;,&quot;&quot;); </sci:value>
					</sci:arg>
					<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>&lt;p&gt;
This expression is executed only the first time data passes into the component.
&lt;p/&gt; 
Since there is no data available at initialization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>&lt;p&gt;
This expression is executed only at finalization (after the last data passes out of the component).
&lt;p/&gt; 
Since there is no data available at finalization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Adds any properties calculated in this component to a data record&apos;s property list.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Do Screen" type="BoolType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>When TRUE, controls which exit port is used for
each data record by evaluating the final expression
(or only one) listed in the &quot;Expression&quot; parameter.
   -Pass (green) port when expression true
   -Fail (red) port when expression false</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="ExpressionVersion" type="LongType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Version of expression parser to use.</sci:help>
						<sci:value>2</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Mon Jan 21 09:55:43 2008</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Custom Manipulator (PilotScript)</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Custom Manipulator (PilotScript)</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>EXPRESSIONNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{0995D675-7EE2-432C-95DF-E91C14052B22}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>1266 -420</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Applies a PilotScript expression to each data record
</sci:value>
						<sci:value>&lt;p&gt;PilotScript is the native scripting language in Pipeline Pilot.  It is based on PL/SQL and allows you to query or alter the properties on data records.  For example, the expression:

&lt;blockquote&gt;
&lt;code&gt;A := 10;&lt;/code&gt;
&lt;/blockquote&gt;
creates a property named &quot;A&quot; and sets the value to &quot;10&quot;.&lt;/p&gt;

&lt;p&gt;For each incoming data record the PilotScript statements in &lt;i&gt;Expression&lt;/i&gt; are evaluated.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To initialize global variables such as counters, use &lt;i&gt;Initial Expression&lt;/i&gt;.&lt;/li&gt; 
&lt;li&gt;To clean up global variables or calculate final results use &lt;i&gt;Final Expression&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Parameters on Custom Manipulators do not become global variables that can be accessed via &lt;i&gt;@ParameterName&lt;/i&gt; syntax.  They must be accessed by using the &lt;i&gt;Parameter(&apos;ParameterName&apos;)&lt;/i&gt; function or by using token substitution via &lt;i&gt;$(ParameterName)&lt;/i&gt; syntax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For more information on PilotScript, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/pscript/pscript_overview.htm&apos;)&quot;&gt;PilotScript Overview&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To use PilotScript to filter data records use &lt;a href=&quot;javascript:DoLink(&apos;{DD58ECD1-516F-48FE-A5DB-8328AED680F2}&apos;)&quot;&gt;Custom Filter (PilotScript)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>7.0.0.35</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>28</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Manipulators\Custom Manipulator (PilotScript)</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.Protocol.1">
				<sci:component name="SMILES and InChI Name to Structure" version="2">
					<sci:arg name="Chem Name Property" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;The name of the property holding the chemical name to be converted.&lt;/p&gt;</sci:help>
						<sci:value>inchi</sci:value>
					</sci:arg>
					<sci:arg name="String Representation of Structure to Output" type="StringType" required="true" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;A string representation of the structure resulting from the name conversion.  The representation is included on the output data record.&lt;/p&gt;

&lt;p&gt;If the input to this component is a single chemical name, then the output data record will represent the molecule directly.  With this parameter, you may also choose to represent the structure as a string on the output (as either a CTAB, Smiles, or Canonical Smiles string).

&lt;p&gt;When the input to this component is a list of names (i.e., an array of name strings), then the output data record cannot represent all the result molecules directly.  In this case, the structures are represented solely based on your choice here.  The output will also be an array, one element for each name.  Array inputs are common when processing document data records, where more than one name was found in the document.

&lt;p&gt;The structure will be output in a property named &lt;i&gt;ChemCTAB&lt;/i&gt;, &lt;i&gt;ChemSmiles&lt;/i&gt;, or &lt;i&gt;ChemCanonicalSmiles&lt;/i&gt; respectively.  If the input is an array of names, then if a given chemical name did not convert, the corresponding output value in the array is &lt;i&gt;No Structure&lt;/i&gt;.</sci:help>
						<sci:legalval>None</sci:legalval>
						<sci:legalval selected="true">CTAB</sci:legalval>
						<sci:legalval>Smiles</sci:legalval>
						<sci:legalval>Canonical Smiles</sci:legalval>
					</sci:arg>
					<sci:arg name="Molecule Custom Filter" type="ExpressionType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
						<sci:help>&lt;p&gt;A PilotScript expression to filter which structures should be retained in the output.
&lt;p&gt;For example, names of very small structures (such as &quot;water&quot;) are common in documents. To filter out these common small structures, use a PilotScript expression such as:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Molecular_Weight &gt;= 20&lt;/code&gt;
&lt;/ul&gt;
Molecules not meeting the expression constraint are treated the same as names that could not be converted (i.e., they are output on the fail port or labelled as &quot;No Structure&quot;, depending on the Document Processing Options).
&lt;p&gt;Other useful expressions might be:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Num_Atoms &gt; 5&lt;/code&gt;
&lt;li&gt;&lt;code&gt;ALogP &gt; 1&lt;/code&gt;
&lt;/ul&gt;
</sci:help>
					</sci:arg>
					<sci:arg name="Document Processing Options" type="GroupType" required="false" visibility="visible" multi="false">
						<sci:help>Options for processing documents, or other data records that have multiple ChemNames represented as an array</sci:help>
						<sci:member>Keep Best Name Variations</sci:member>
						<sci:member>Keep Unconverted Names</sci:member>
					</sci:arg>
					<sci:arg name="Keep Best Name Variations" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>If true, keep only the best (longest) name variations for each segment of text.  If false, keep all variations.

&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; When the input data record has a single chemical name, converted names are output on the Pass port and unconverted names are output on the Fail port.  However, when the input is an ARRAY of chemical names, then parameters &lt;i&gt;Keep Best Name Variations&lt;/i&gt; and &lt;i&gt;Keep Unconverted Names&lt;/i&gt; combine to determine whether each chemical name is retained in the output or is discarded.  The behavior is depicted in this table:
&lt;table&gt;
&lt;tr&gt;
&lt;th colspan=2&gt;Parameters ...&lt;/td&gt;
&lt;th colspan=4&gt;ChemName is ...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Keep Best Name Variation&lt;/th&gt;&lt;th&gt;Keep Unconverted Names&lt;/th&gt;
&lt;th&gt;Converted, is Best&lt;/th&gt;&lt;th&gt;Converted, not Best&lt;/th&gt;
&lt;th&gt;Not converted, is Best&lt;/th&gt;&lt;th&gt;Not converted, not Best&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;&lt;td&gt;True&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;&lt;td&gt;False&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;&lt;td&gt;True&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;&lt;td&gt;False&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
The four possible parameter settings are given in the first two columns.  The kind of name, and its disposition in the output, are given by the last four columns.  For example, when both parameters are True, then the best converted name or the best unconverted name are retained, but other names are discarded.  &lt;b&gt;&quot;Best&quot;&lt;/b&gt; is relative to any span of text where more than one name has been identified.  If more than one name is found in a span of text, then the best name is the longest converted name; if no names convert, then &quot;best&quot; is the longest unconverted name.
&lt;/p&gt;</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Keep Unconverted Names" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>If true, the array of ChemNames remains the same, regardless of which names were converted.  If false, the array of ChemNames includes only those names that could be converted.

&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; When the input data record has a single chemical name, converted names are output on the Pass port and unconverted names are output on the Fail port.  However, when the input is an ARRAY of chemical names, then parameters &lt;i&gt;Keep Best Name Variations&lt;/i&gt; and &lt;i&gt;Keep Unconverted Names&lt;/i&gt; combine to determine whether each chemical name is retained in the output or is discarded.  The behavior is depicted in this table:
&lt;table&gt;
&lt;tr&gt;
&lt;th colspan=2&gt;Parameters ...&lt;/td&gt;
&lt;th colspan=4&gt;ChemName is ...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Keep Best Name Variation&lt;/th&gt;&lt;th&gt;Keep Unconverted Names&lt;/th&gt;
&lt;th&gt;Converted, is Best&lt;/th&gt;&lt;th&gt;Converted, not Best&lt;/th&gt;
&lt;th&gt;Not converted, is Best&lt;/th&gt;&lt;th&gt;Not converted, not Best&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;&lt;td&gt;True&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;&lt;td&gt;False&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;&lt;td&gt;True&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;&lt;td&gt;False&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
The four possible parameter settings are given in the first two columns.  The kind of name, and its disposition in the output, are given by the last four columns.  For example, when both parameters are True, then the best converted name or the best unconverted name are retained, but other names are discarded.  &lt;b&gt;&quot;Best&quot;&lt;/b&gt; is relative to any span of text where more than one name has been identified.  If more than one name is found in a span of text, then the best name is the longest converted name; if no names convert, then &quot;best&quot; is the longest unconverted name.
&lt;/p&gt;</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Chem CTAB Property" type="StringType" required="true" visibility="visible" multi="false" uimpl="true">
						<sci:help>The name of the CTAB property for the converted structure</sci:help>
						<sci:value>ChemCTAB</sci:value>
					</sci:arg>
					<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>Lists the set of temporary files which will be converted by the network to true temporary file names</sci:help>
					</sci:arg>
					<sci:arg name="WebExports" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>A comma separated list of global properties which will be automatically 
exported if this protocol is published as a web service.</sci:help>
					</sci:arg>
					<sci:arg name="Protocol Form" type="ProtocolType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>The path to a protocol that will render an HTML user interface for this protocol.  This optional parameter is used by Web Port to provide a custom user interface for a protocol.</sci:help>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>EmptyProtocol</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/chemmining</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Mon Apr 30 11:15:23 2012</sci:value>
					</sci:arg>
					<sci:arg name="ComponentComment" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Component Comment</sci:help>
						<sci:value>Defines a subprotocol in a pipeline. When you are creating a pipeline that requires a subprotocol as a component, drag this component into the pipeline, open it, and add components to it.</sci:value>
					</sci:arg>
					<sci:arg name="ComponentUsage" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Component Usage</sci:help>
						<sci:value>When you are creating a pipeline which requires a subprotocol as 
a component, you can drag this SubProtocol component into the 
pipeline, open it, and add components into it.</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>SMILES and InChI Name to Structure</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol AutoLayout</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolShowComment" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol ShowComment</sci:help>
						<sci:value>true</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolComment" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Add Protocol Comment Here</sci:help>
						<sci:value>Add Protocol Comment Here</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>CALCULATORNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>Component Revision</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{AEFDEFE0-B31E-4F90-82CA-FAA45314538A}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>1554 -420</sci:value>
					</sci:arg>
					<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>By Ref</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Convert SMILES and InChI names to structures</sci:value>
						<sci:value>&lt;p&gt;Uses the Pipeline Pilot components &lt;a href=&quot;javascript:DoLink(&apos;{AC8262DA-E648-4D24-9CD1-D731A8F53F9D}&apos;)&quot;&gt;Molecule from SMILES&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{5E5EBE7B-B438-4316-B799-65B80EA9CFB4}&apos;)&quot;&gt;Molecule from InChI_AuxInfo&lt;/a&gt; to convert SMILES and InChI names to structures.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; When the input data record has a single chemical name, converted names are output on the Pass port and unconverted names are output on the Fail port.  However, when the input is an ARRAY of chemical names, then parameters &lt;i&gt;Keep Best Name Variations&lt;/i&gt; and &lt;i&gt;Keep Unconverted Names&lt;/i&gt; combine to determine whether each chemical name is retained in the output or is discarded.  The behavior is depicted in this table:
&lt;table&gt;
&lt;tr&gt;
&lt;th colspan=2&gt;Parameters ...&lt;/td&gt;
&lt;th colspan=4&gt;ChemName is ...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Keep Best Name Variation&lt;/th&gt;&lt;th&gt;Keep Unconverted Names&lt;/th&gt;
&lt;th&gt;Converted, is Best&lt;/th&gt;&lt;th&gt;Converted, not Best&lt;/th&gt;
&lt;th&gt;Not converted, is Best&lt;/th&gt;&lt;th&gt;Not converted, not Best&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;&lt;td&gt;True&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;&lt;td&gt;False&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;&lt;td&gt;True&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;&lt;td&gt;False&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Keep&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;&lt;td&gt;Discard&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
The four possible parameter settings are given in the first two columns.  The kind of name, and its disposition in the output, are given by the last four columns.  For example, when both parameters are True, then the best converted name or the best unconverted name are retained, but other names are discarded.  &lt;b&gt;&quot;Best&quot;&lt;/b&gt; is relative to any span of text where more than one name has been identified.  If more than one name is found in a span of text, then the best name is the longest converted name; if no names convert, then &quot;best&quot; is the longest unconverted name.
&lt;/p&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Options</sci:help>
						<sci:legalval>Make Shortcut by Default</sci:legalval>
						<sci:legalval>Owner Access Only</sci:legalval>
					</sci:arg>
					<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Sticky Notes</sci:help>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>8.9.1.4</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>27</sci:value>
					</sci:arg>
					<sci:arg name="SubProtocolMadeLinkIntoCopy" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Subprotocol Made Link Into Copy</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Documents and Text\Chemical Text Mining\Utilities\Name To Structure Converters\SMILES and InChI Name to Structure</sci:value>
					</sci:arg>
				</sci:component>
				<sci:protocol/>
			</sci:data>
			<sci:data object="SciTegic.EvaluateExpression.1">
				<sci:component name="Custom Manipulator (PilotScript)" version="2">
					<sci:arg name="Expression" type="ExpressionType" required="true" visibility="visible" multi="false" expanded="true" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Expression (or list of expressions separated by semi-colons) to evaluate.</sci:help>
						<sci:member>Initial Expression</sci:member>
						<sci:member>Final Expression</sci:member>
						<sci:member>Keep Calculated Properties</sci:member>
						<sci:value>rename(&quot;entry.chapman-hall-number&quot;,&quot;chapman-hall-number&quot;);
rename(&quot;entry.cas-number&quot;,&quot;cas-number&quot;);

keep(&quot;chapman-hall-number&quot;,&quot;inchi&quot;,&quot;cas-number&quot;);
name:= property(&quot;chapman-hall-number&quot;);</sci:value>
					</sci:arg>
					<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>&lt;p&gt;
This expression is executed only the first time data passes into the component.
&lt;p/&gt; 
Since there is no data available at initialization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>&lt;p&gt;
This expression is executed only at finalization (after the last data passes out of the component).
&lt;p/&gt; 
Since there is no data available at finalization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Adds any properties calculated in this component to a data record&apos;s property list.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Do Screen" type="BoolType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>When TRUE, controls which exit port is used for
each data record by evaluating the final expression
(or only one) listed in the &quot;Expression&quot; parameter.
   -Pass (green) port when expression true
   -Fail (red) port when expression false</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="ExpressionVersion" type="LongType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Version of expression parser to use.</sci:help>
						<sci:value>2</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Mon Jan 21 09:55:43 2008</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>rename(&quot;entry.chapman-hall-num</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Custom Manipulator (PilotScript)</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>EXPRESSIONNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{0995D675-7EE2-432C-95DF-E91C14052B22}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>1890 -420</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Applies a PilotScript expression to each data record
</sci:value>
						<sci:value>&lt;p&gt;PilotScript is the native scripting language in Pipeline Pilot.  It is based on PL/SQL and allows you to query or alter the properties on data records.  For example, the expression:

&lt;blockquote&gt;
&lt;code&gt;A := 10;&lt;/code&gt;
&lt;/blockquote&gt;
creates a property named &quot;A&quot; and sets the value to &quot;10&quot;.&lt;/p&gt;

&lt;p&gt;For each incoming data record the PilotScript statements in &lt;i&gt;Expression&lt;/i&gt; are evaluated.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To initialize global variables such as counters, use &lt;i&gt;Initial Expression&lt;/i&gt;.&lt;/li&gt; 
&lt;li&gt;To clean up global variables or calculate final results use &lt;i&gt;Final Expression&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Parameters on Custom Manipulators do not become global variables that can be accessed via &lt;i&gt;@ParameterName&lt;/i&gt; syntax.  They must be accessed by using the &lt;i&gt;Parameter(&apos;ParameterName&apos;)&lt;/i&gt; function or by using token substitution via &lt;i&gt;$(ParameterName)&lt;/i&gt; syntax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For more information on PilotScript, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/pscript/pscript_overview.htm&apos;)&quot;&gt;PilotScript Overview&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To use PilotScript to filter data records use &lt;a href=&quot;javascript:DoLink(&apos;{DD58ECD1-516F-48FE-A5DB-8328AED680F2}&apos;)&quot;&gt;Custom Filter (PilotScript)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>7.0.0.35</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>9</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Manipulators\Custom Manipulator (PilotScript)</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.TransformMolecule.1">
				<sci:component name="Keep Largest Fragment" version="2">
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>Parameter Help</sci:help>
						<sci:value>KeepLargestFragment</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/chemistry</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Fri Feb 04 13:05:34 2011</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Keep Largest Fragment</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>COMPONENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{54DE113D-340C-4846-9EC1-531A01FDAB91}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>2202 -420</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Keep Largest Fragment</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Keeps only the largest fragment in the molecule</sci:value>
						<sci:value>Deletes all atoms that are not part of the largest connected structure fragment in each input molecule. Fragment size is defined based on number of atoms. Molecules consisting of only one fragment are passed unmodified.
&lt;p&gt;
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To carry out other common molecular manipulations, see &lt;a href=&quot;javascript:DoLink(&apos;{EFEA1A46-A6DB-4DB9-A5A9-C7F3D2ADFDE2}&apos;)&quot;&gt;Standardize Molecule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;To identify and remove salt fragments from molecules see &lt;a href=&quot;javascript:DoLink(&apos;{65582FDD-27E4-442f-BED7-71A254321894}&apos;)&quot;&gt;Identify Salts&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{1A8DDD51-D1AE-45d9-823B-80E81B7BCAA6}&apos;)&quot;&gt;Strip Salts.&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
</sci:value>
						<sci:value>Molecule</sci:value>
						<sci:value/>
						<sci:value>Molecule</sci:value>
						<sci:value>Molecule record with all but the largest fragment removed</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>18</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Keep Largest Fragment</sci:value>
					</sci:arg>
				</sci:component>
				<sci:proplist>
					<sci:propval name="RegistrationVersion">6.0.1.0</sci:propval>
				</sci:proplist>
			</sci:data>
			<sci:data object="SciTegic.EvaluateExpression.1">
				<sci:component name="Organic Filter" version="2">
					<sci:arg name="Expression" type="ExpressionType" required="true" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>The expression used to filter the data.
When it evaluates as TRUE, the data record
continues out the Pass (green) port.  When it
evaluates as FALSE, data exits through the Fail (red) port.</sci:help>
						<sci:member>Final Expression</sci:member>
						<sci:member>Initial Expression</sci:member>
						<sci:value>@haveOrganicCount := 0;
@haveNumAtoms := 0;
if (Organic_Count is defined) then
   rename(&apos;Organic_Count&apos;, &apos;Save_Organic_Count_Save&apos;);
   @haveOrganicCount := 1;
end if;
if (Num_Atoms is defined) then
   rename(&apos;Num_Atoms&apos;, &apos;Save_Num_Atoms_Save&apos;);
   @haveNumAtoms := 1;
end if;

@retVal := (Organic_Count = Num_Atoms);

if (@haveOrganicCount) then
   rename(&apos;Save_Organic_Count_Save&apos;, &apos;Organic_Count&apos;);
else
   remove(&apos;Organic_Count&apos;);
end if;
if (@haveNumAtoms ) then
   rename(&apos;Save_Num_Atoms_Save&apos;, &apos;Num_Atoms&apos;);
else
   remove(&apos;Num_Atoms&apos;);
end if;

if (@retVal) then
   removeglobal(&apos;haveOrganicCount&apos;, &apos;haveNumAtoms&apos;, &apos;retVal&apos;);
   true;
else
   removeglobal(&apos;haveOrganicCount&apos;, &apos;haveNumAtoms&apos;, &apos;retVal&apos;);
   false;
end if;</sci:value>
					</sci:arg>
					<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>An expression evaluated only when the component
is first initialized (when the first data record enters).
  (Since there is no data available at initialization
   time, only expressions referencing global
   properties are allowed.)</sci:help>
					</sci:arg>
					<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>An expression evaluated only when the
component is finalized (once the last data
record has passed).
*Since there is no data available at finalization
  time, only expressions referencing global 
  properties are allowed.</sci:help>
					</sci:arg>
					<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>Allows any properties that were calculated in
&quot;Expression&quot; to be included with the exiting
record.
Otherwise, these properties are removed after
the evaluation is complete.</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Do Screen" type="BoolType" required="false" visibility="nevershow" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>Argument Description</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Organic Filter</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/chemistry</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Fri Feb 04 12:51:50 2011</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Organic Filter</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>FILTERNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{1F4BE3DA-91DE-4481-B987-35AE93A78C03}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>2538 -420</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Checks molecules for the presence of inorganic atoms</sci:value>
						<sci:value>Organic atoms are defined as: H, C, N, O, P, S, F, Cl, Br, or I. Molecules containing only these atom types are identified as organic; any molecule containing any other atom type (including R, Z, and query atoms such as A and Q) is defined as inorganic and sent to the Fail port.</sci:value>
						<sci:value>Molecule</sci:value>
						<sci:value/>
						<sci:value>Molecule</sci:value>
						<sci:value>Molecules containing no inorganic atoms</sci:value>
						<sci:value>Molecule</sci:value>
						<sci:value>Molecules containing at least one inorganic atom</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>7.5.2.300</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>19</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Chemistry\Data Access and Manipulation\Filters\Organic Filter</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.TransformMolecule.1">
				<sci:component name="Add Hydrogens" version="2">
					<sci:arg name="Action" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Specifies the Hydrogen fill mode:

&lt;p&gt;Adds explicit hydrogens to the molecule. Options include: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;AddHydrogens&lt;/b&gt;:  Add hydrogens to all atoms.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;AddHeteroHydrogens&lt;/b&gt;:  Add hydrogens just to heteroatoms.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;AddStereoHydrogens&lt;/b&gt;:  Add hydrogens just to stereoatoms. Explicit Hydrogens are only added to stereoatoms in which all the atoms attached to the chiral center are in rings or the attached atoms are also stereocenters. Adding these hydrogens often avoids having to put a wedge bond on a ring bond or on a bond to another stereoatom.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;AddBridgeHeadHydrogens&lt;/b&gt;:  Add hydrogens to any bridgehead atom.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
						<sci:legalval selected="true">AddHydrogens</sci:legalval>
						<sci:legalval>AddHeteroHydrogens</sci:legalval>
						<sci:legalval>AddStereoHydrogens</sci:legalval>
						<sci:legalval>AddBridgeHeadHydrogens</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/chemistry</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Tue Feb 27 09:41:27 2007</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Add Hydrogens</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>COMPONENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{4A7D57EA-6B39-43DE-B92C-858BD216569A}</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Add Hydrogens</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>2850 -420</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Adds hydrogens to the molecule</sci:value>
						<sci:value>&lt;p&gt;Adds explicit hydrogens to the molecule. Options include: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;AddHydrogens&lt;/b&gt;:  Add hydrogens to all atoms.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;AddHeteroHydrogens&lt;/b&gt;:  Add hydrogens just to heteroatoms.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;AddStereoHydrogens&lt;/b&gt;:  Add hydrogens just to stereoatoms. Explicit Hydrogens are only added to stereoatoms in which all the atoms attached to the chiral center are in rings or the attached atoms are also stereocenters. Adding these hydrogens often avoids having to put a wedge bond on a ring bond or on a bond to another stereoatom.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;AddBridgeHeadHydrogens&lt;/b&gt;:  Add hydrogens to any bridgehead atom.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove explicit hydrogens, use &lt;a href=&quot;javascript:DoLink(&apos;{5A520938-939F-4210-A816-A023520422D7}&apos;)&quot;&gt;Remove Hydrogens&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>Molecule</sci:value>
						<sci:value/>
						<sci:value>Molecule</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>20</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Add Hydrogens</sci:value>
					</sci:arg>
				</sci:component>
				<sci:proplist>
					<sci:propval name="RegistrationVersion">6.1.0.8</sci:propval>
				</sci:proplist>
			</sci:data>
			<sci:data object="SciTegic.EvaluateExpression.1">
				<sci:component name="Custom Filter (PilotScript)" version="2">
					<sci:arg name="Expression" type="ExpressionType" required="true" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>The PilotScript expression used to filter the data.</sci:help>
						<sci:member>Initial Expression</sci:member>
						<sci:member>Final Expression</sci:member>
						<sci:member>Keep Calculated Properties</sci:member>
						<sci:value>Num_Atoms &gt;1</sci:value>
					</sci:arg>
					<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>&lt;p&gt;
An expression evaluated only when the component
is first initialized (when the first data record enters).
&lt;p/&gt;
Since there is no data available at initialization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>&lt;p&gt;
An expression evaluated only when the
component is finalized (once the last data
record has passed).
&lt;p/&gt;
Since there is no data available at finalization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="visible" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>Allows any properties that were calculated in
&quot;Expression&quot; to be included with the exiting
record.
Otherwise, these properties are removed after
the evaluation is complete.</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ExpressionVersion" type="LongType" required="false" visibility="nevershow" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>Version of expression parser to use.</sci:help>
						<sci:value>2</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Mon Jan 21 09:57:16 2008</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Num_Atoms &gt;1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>FILTERNODE</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Custom Filter (PilotScript)</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{DD58ECD1-516F-48FE-A5DB-8328AED680F2}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>3162 -420</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Passes data records for which a PilotScript expression evaluates to True

</sci:value>
						<sci:value>&lt;p&gt;For each incoming data record, the PilotScript statements in &lt;i&gt;Expression&lt;/i&gt; are evaluated. If the last statement in the expression evaluates to True or non-zero, the record is sent out the Pass port. Otherwise it is sent out the Fail port.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To initialize global variables such as counters, use &lt;i&gt;Initial Expression&lt;/i&gt;.&lt;/li&gt; 
&lt;li&gt;To clean up global variables or calculate final results use &lt;i&gt;Final Expression&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Parameters on Custom Manipulators do not become global variables that can be accessed via &lt;i&gt;@ParameterName&lt;/i&gt; syntax.  They must be accessed by using the &lt;i&gt;Parameter(&apos;ParameterName&apos;)&lt;/i&gt; function or by using token substitution via &lt;i&gt;$(ParameterName)&lt;/i&gt; syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Data records for which the final expression in the PilotScript evaluates to True or non-zero</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Data records for which the final expression in the PilotScript evaluates to False or zero</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>22</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Filters\Custom Filter (PilotScript)</sci:value>
					</sci:arg>
				</sci:component>
				<sci:proplist>
					<sci:propval name="RegistrationVersion">7.0.0.35</sci:propval>
				</sci:proplist>
			</sci:data>
			<sci:data object="SciTegic.SDWriter.1">
				<sci:component name="SD Writer" version="2">
					<sci:arg name="Destination" type="DestinationURLType" required="true" visibility="visible" multi="false">
						<sci:help>The filename or URL for the destination data. To save in compressed (zipped) format, add the extension .gz or .zip to the filename.</sci:help>
						<sci:member>Maximum</sci:member>
						<sci:member>IfFileExists</sci:member>
						<sci:member>CharacterEncoding</sci:member>
						<sci:value>C:\Users\DELL\Desktop\Paper\Natural Products\1 Data Preprocess\1.1 Data Standard\dnp2016-standard.sdf</sci:value>
					</sci:arg>
					<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The maximum number of data records to write (all if value is empty)</sci:help>
					</sci:arg>
					<sci:arg name="IfFileExists" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>What to do if the given destination file already exists</sci:help>
						<sci:legalval selected="true">Overwrite</sci:legalval>
						<sci:legalval>Append</sci:legalval>
						<sci:legalval>Halt</sci:legalval>
					</sci:arg>
					<sci:arg name="CharacterEncoding" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;Indicates the character set that will be used within the file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ANSI&lt;/b&gt; is the default and specifies a character set where each character is defined by a single byte.  This allows the Latin-1 (ISO-8859-1) character set to be written to the file.  Virtually all applications can read these files.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;UTF-8&lt;/b&gt; specifies a variable length character set.  Each character is represented by 1 to 6 bytes.  This allows writing out all extended characters specified in the Unicode character sets while maintaining reasonably lengthed files.  Many applications do not support UTF-8 files.&lt;/li&gt;
 
&lt;li&gt;&lt;b&gt;Unicode&lt;/b&gt; and &lt;b&gt;Unicode big endian&lt;/b&gt; are sets where each character is represented by exactly 2 bytes (also known as UCS-2).  Depending on which is used will determine the order in which the bytes appear for each character. Many applications do not support Unicode or Unicode big endian files.&lt;/li&gt;
&lt;/ul&gt;
 
&lt;p&gt;&lt;b&gt;See Also&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For more information about each of these encoding styles, go to &lt;a href=&quot;javascript:DoLink(&apos;http://www.unicode.org/&apos;)&quot;&gt;http://www.unicode.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">ANSI</sci:legalval>
						<sci:legalval>UTF-8</sci:legalval>
						<sci:legalval>Unicode</sci:legalval>
						<sci:legalval>Unicode big endian</sci:legalval>
					</sci:arg>
					<sci:arg name="SD Format Options" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
						<sci:help>Options for the SD Writer:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Write Structure&lt;/b&gt;:  Includes available structure information with each record.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Properties&lt;/b&gt;:  Includes available property information with each record.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Date&lt;/b&gt;:  Writes the current date into the file.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Fully Padded Lines&lt;/b&gt;:  Writes all the fields in the Atoms and Bonds lines, padding with zeroes those fields with undefined values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Query Info&lt;/b&gt;:  Writes out MDL query information and also additional SciTegic molecule query information to the properties of the SD record.
To read the SciTegic-specific part of this information back in, use a SciTegic SD Reader with the ReadQueryInfo parameter set to True. (This option writes out substructure queries that may have come from SMARTS queries. It also stops writing query information for viewers that cannot handle it).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Two Spaces In Data Header Line&lt;/b&gt;:  When on, data headers will be &lt;TT&gt;&amp;gt&amp;nbsp&amp;nbsp&amp;ltPropName&amp;gt&lt;/TT&gt;.  When off, data headers will be &lt;TT&gt;&quot;&amp;gt&amp;nbsp&amp;ltPropName&amp;gt&quot;&lt;/TT&gt;.  The standard does not specify how many spaces there should be. Making this option available for compatibility with 3rd party readers.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Wrap Long Property Lines&lt;/b&gt;:  By the MDL CTFile standard property lines are limited to 200 characters.  When selected, properties longer than 200 characters are with newlines every 200 characters.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Skip Null Or Empty String Properties&lt;/b&gt;:  When selected, properties that are either null or empty strings will be skipped upon SD export.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Dot For Empty String Properties&lt;/b&gt;:  In the MDL CTFile format, an empty line is used to terminate a property value.  Because of this, there is a convention of writing a &apos;.&apos; on an empty line to distinguish between a property that has an empty string value (&quot;&quot;) and a property that has no value (or a null value).  Selecting this option enables this convention and empty string properties are written with a &apos;.&apos; on the first line and an empty second line to terminate the property.  When not selected, empty string properties will be written with only a single empty terminating line (the same as null properties).  The default for this option is &quot;on&quot; to match the behavior in previous versions.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Templates&lt;/b&gt;:  When the molecule has atoms that refer to residue templates, this parameter specifies whether or not to include the template definitions in a TEMPLATE block as part of the CTAB.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert To H2 And H+ Atom Types:&lt;/b&gt; &apos;H2&apos; and &apos;H+&apos; are two non-standard element types that can be assigned to atoms by the MDL sketchers. They represent unattached Hydrogen (a Hydrogen molecule) and charged Hydrogen (a proton), respectively. When this parameter is selected, explicit hydrogen atoms are checked to determine if they can be classified as &apos;H2&apos; or &apos;H+&apos; and, if so, they are written out with these special types instead of just &apos;H&apos;.&lt;/li&gt; 
&lt;li&gt;&lt;b&gt;Convert Pi Systems To Radicals:&lt;/b&gt; When checked, converts pi systems involved in pi bonds into their radical representation which is supported by both the V2000 and V3000 formats.  When not checked, pi bonds and pi systems are written out in V3000 format using multiple-attachment point coordination bonds (type 9).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&amp;nbsp
&lt;/p&gt;
&lt;b&gt;V2000 and V3000 Format Parameters&lt;/b&gt;
&lt;p&gt;
The next two options can be used to force the SD file format to be exclusively V2000 or V3000. If none of the options is selected, the input molecules are written in V2000 format unless they contain features that require the use of the V3000 format. These features include presence of enhanced stereo markings, more than 999 atoms or bonds, atom lists with more than 16 atom types or bonds of zero order (dative, coordination, hydrogen bonds). In this case, the output SD file might contain a mix of V2000 and V300 molecules.
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use V3000 Format&lt;/b&gt;:  Force the format to be MDL V3000 for all molecules.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use V2000 Format&lt;/b&gt;:  Force the format to be MDL V2000 for all molecules. Any molecule with features that require the V3000 format is sent to the Fail port. Note that the Fail port in the SD Writer is not active by default. If you want to use this option, make sure to activate the component Fail port by right-clicking on the component and selecting the &lt;i&gt;Toggle Ports&lt;/i&gt; menu.&lt;/li&gt;
&lt;/ul&gt;

</sci:help>
						<sci:legalval selected="true">Write Structure</sci:legalval>
						<sci:legalval selected="true">Write Properties</sci:legalval>
						<sci:legalval selected="true">Write Date</sci:legalval>
						<sci:legalval>Write Fully Padded Lines</sci:legalval>
						<sci:legalval selected="true">Write Query Info</sci:legalval>
						<sci:legalval>Write Two Spaces In Data Header Line</sci:legalval>
						<sci:legalval selected="true">Wrap Long Property Lines</sci:legalval>
						<sci:legalval>Skip Null Or Empty String Properties</sci:legalval>
						<sci:legalval selected="true">Write Dot For Empty String Properties</sci:legalval>
						<sci:legalval>Use V3000 Format</sci:legalval>
						<sci:legalval>Use V2000 Format</sci:legalval>
						<sci:legalval selected="true">Write Templates</sci:legalval>
						<sci:legalval>Convert To H2 And H+ Atom Types</sci:legalval>
						<sci:legalval>Convert Pi Systems To Radicals</sci:legalval>
					</sci:arg>
					<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
						<sci:help>Contains less commonly used parameters</sci:help>
						<sci:member>Name</sci:member>
						<sci:member>Comment</sci:member>
					</sci:arg>
					<sci:arg name="Name" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Name of property that holds the name of each molecule</sci:help>
						<sci:value>Name</sci:value>
					</sci:arg>
					<sci:arg name="Comment" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Name of the property that holds the comment to write in the CTAB header for each molecule</sci:help>
						<sci:value>Comment</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval>ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="HasConvertPiSystemOption" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="HasWriteDotOption" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/chemistry</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Wed Aug 10 12:11:42 2011</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>SD Writer</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DOCUMENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{DC8EE7B0-0620-42FE-944C-B4CD1E79480E}</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>SD Writer</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>3498 -420</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Writes an MDL SD (structured data) file</sci:value>
						<sci:value>Writes the molecule and associated property data to the &lt;i&gt;Destination&lt;/i&gt; file in MDL SD format.

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To read files in MDL SD format, use the &lt;a href=&quot;javascript:DoLink(&apos;{CA65B896-4FE6-4E3A-B884-DC16B53B8D26}&apos;)&quot;&gt;SD Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To convert molecules to and from a text property containing the molecular connection table (CTAB) in MDL format, use &lt;a href=&quot;javascript:DoLink(&apos;{E622FBD9-9FA9-451A-A102-1800B5F28B6D}&apos;)&quot;&gt;Molecule to CTAB&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{7D354B65-DDD8-4EA4-83A7-21501A8A6852}&apos;)&quot;&gt;Molecule from CTAB&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;

</sci:value>
						<sci:value>Molecule</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>8.5.0.200</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>25</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Chemistry\Data Access and Manipulation\Writers\SD Writer</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.XMLReader.1">
				<sci:component name="XML Reader (Generic)" version="2">
					<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true">
						<sci:help>&lt;p&gt;
The name or path name for the source data. The source can be a file, a network resource, a data record property, or a global property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;Use a file path name for files&lt;/li&gt;
&lt;li&gt;Use a network URL for network resources&lt;/li&gt;
&lt;li&gt;Use &quot;global://property-name&quot; for global properties&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
						<sci:member>Maximum</sci:member>
						<sci:member>SourceTag</sci:member>
						<sci:member>Keep Properties</sci:member>
						<sci:value>C:\Users\DELL\Desktop\Paper\Natural Products\1 Data Preprocess\1.1 Data Standard\CRCN-INCHI-2.txt</sci:value>
					</sci:arg>
					<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The maximum number of data records to read.</sci:help>
					</sci:arg>
					<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false" uimpl="false">
						<sci:help>The type of tag to create to identify the source of data records. A property called &quot;SourceTag&quot; is created and holds the value indicated.

 - None: No SourceTag property is created and any existing ones are removed.

 - Filename: The name of the file read.

 - FilenameAndExtension: The name of the file read with its file extension.

 - FullFilename: The name of the file read, including the directory path.

 - ZipFilename: When reading a compressed zip file, the filename within the compressed archive.

 - Number: When multiple files are read in this component, they are numbered 1,2,3...

 - Letter: When multiple files are read in this component, they are lettered A, B, C...

 - KeepCurrent: Keeps the current value of SourceTag.
</sci:help>
						<sci:legalval selected="true">None</sci:legalval>
						<sci:legalval>Filename</sci:legalval>
						<sci:legalval>FilenameAndExtension</sci:legalval>
						<sci:legalval>FullFilename</sci:legalval>
						<sci:legalval>ZipFilename</sci:legalval>
						<sci:legalval>Number</sci:legalval>
						<sci:legalval>Letter</sci:legalval>
						<sci:legalval>KeepCurrent</sci:legalval>
					</sci:arg>
					<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>A list of properties the reader should retain for each data record that is output. If a value is not defined, retains all properties. If the parameter contains the value &quot;-&quot; (minus sign), properties are not retained.  This parameter is ignored if &lt;i&gt;Preserve Hierarchy&lt;/i&gt; is &apos;True&apos;.
</sci:help>
						<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Preserve Hierarchy to false.&quot;);
Parameter(&apos;Preserve Hierarchy&apos;) = false;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="XML Repeat Tag" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>This parameter specifies the tag for the identification of an individual record. If this tag appears multiple times in the document, multiple data records are returned, one for each tag occurrence. If a tag is not specified, the entire document is read into a single record.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;When encountering nested repeat tag elements, only the top level entry will be returned. For example, 
if the repeat tag is &quot;category&quot;, the following XML will return a single record:&lt;br&gt;
&lt;code&gt;
&amp;lt;category name=&amp;quot;sec1&amp;quot;&amp;gt;&amp;lt;category name=&amp;quot;sec1-3&amp;quot;&amp;gt;&amp;lt;/category&amp;gt;&amp;lt;/category&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;</sci:help>
						<sci:member>XML Repeat Level</sci:member>
						<sci:value>inchi</sci:value>
					</sci:arg>
					<sci:arg name="XML Repeat Level" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>This parameter specifies an optional level to restrict the search for repeat tags that delimit
individual records appearing in the XML document. When specified, if multiple repeat tag elements appear at this level in the document, multiple data records are returned, one for each occurrence. If the tag level is left blank, the repeat tags can occur at any level of the XML hierarchy.
&lt;p&gt;
</sci:help>
					</sci:arg>
					<sci:arg name="Properties Are" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>How to create properties from the information in the XML document. If Properties Are Attributes, then attributes in the document become properties on the node associated with the owning element. If Properties Are Leaf Elements, then elements without children (i.e., &quot;leaf elements&quot;) become properties, with the property name taken from the element name, and the value from the text content.</sci:help>
						<sci:legalval selected="true">Attributes</sci:legalval>
						<sci:legalval>Leaf Elements</sci:legalval>
					</sci:arg>
					<sci:arg name="Preserve Hierarchy" type="BoolType" required="false" visibility="visible" multi="false">
						<sci:help>If True, the XML hierarchy is preserved as a series of data nodes and properties within each data record (which can then be accessed as deep properties).  If False, the XML hierarchy is flattened into a series of top level properties.  When False, options for whether and how to pad missing values and attributes can be specified as well.
&lt;p&gt;
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;For manipulating hierarchical data records, see the components under Data Access and Manipulation/Utilities/Data Tree Manipulators.
&lt;/ul&gt;</sci:help>
						<sci:member>Pad Missing Values</sci:member>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Pad Missing Values" type="BoolType" required="false" visibility="visible" multi="false">
						<sci:help>When &lt;b&gt;Preserve Hierarchy&lt;/b&gt; is false, multiple tags with the same name in the same tree are created as array properties.  If this parameter is true, any difference in the number of tags at a specific depth will be corrected by padding the arrays with the string given in &lt;b&gt;Padding Text&lt;/b&gt;.

For example, given the following XML snippet:
&lt;pre&gt;
&amp;lt;a&amp;gt;&lt;br&gt;
	&amp;lt;b&amp;gt;abc&amp;lt;/b&amp;gt;&lt;br&gt;
	&amp;lt;b&amp;gt;def&amp;lt;/b&amp;gt;&lt;br&gt;
	&amp;lt;c&amp;gt;123&amp;lt;/c&amp;gt;&lt;br&gt;
&amp;lt;/a&amp;gt;&lt;br&gt;
&amp;lt;a&amp;gt;&lt;br&gt;
	&amp;lt;b&amp;gt;ghi&amp;lt;/b&amp;gt;&lt;br&gt;
	&amp;lt;d&amp;gt;456&amp;lt;/d&amp;gt;&lt;br&gt;
&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/pre&gt;

With &lt;b&gt;Pad Missing Values&lt;/b&gt; set to &lt;i&gt;False&lt;/i&gt;, these properties will be generated:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;a/b&lt;/b&gt;: Array with 3 items: [&apos;abc&apos;, &apos;def&apos;, &apos;ghi&apos;]
&lt;li&gt;&lt;b&gt;a/c&lt;/b&gt;: String with 1 item: &apos;123&apos;
&lt;li&gt;&lt;b&gt;a/d&lt;/b&gt;: String with 1 item: &apos;456&apos;
&lt;/ul&gt;
&lt;p&gt;With &lt;b&gt;Pad Missing Values&lt;/b&gt; set to &lt;i&gt;True&lt;/i&gt;, these properties will be generated instead:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;a/b&lt;/b&gt;: Array with 3 items: [&apos;abc&apos;, &apos;def&apos;, &apos;ghi&apos;]
&lt;li&gt;&lt;b&gt;a/c&lt;/b&gt;: Array with 3 items: [&apos;123&apos;, &apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;]
&lt;li&gt;&lt;b&gt;a/d&lt;/b&gt;: Array with 3 items: [&apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;, &apos;456&apos;]
&lt;/ul&gt;
</sci:help>
						<sci:member>Padding Text</sci:member>
						<sci:member>Pad Attributes</sci:member>
						<sci:enabledscript>SetDisabledDetails(&quot;Only enabled if Preserve Hierarchy is false&quot;);
not Parameter(&quot;Preserve Hierarchy&quot;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Padding Text" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>The string to use when padding arrays.  By default, this is an empty string.  However, if this causes confusion within your XML data, you might wish to customize the string to something that can be uniquely identified.</sci:help>
						<sci:enabledscript>SetDisabledDetails(&apos;Only enabled if Pad Missing Values is True and Preserve Hierarchy is false&apos;);
Parameter(&apos;Pad Missing Values&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Pad Attributes" type="BoolType" required="false" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;When flattening XML structures, in addition to padding missing tag values, it is often essential to pad attribute properties as well so that nested tags match up with their parent tag&apos;s attribute values.  For instance, consider the following XML snippet:
&lt;p&gt;
&lt;pre&gt;
&amp;lt;a name=&quot;title&quot; source=&quot;file&quot;&amp;gt;
	&amp;lt;b&amp;gt;abc&amp;lt;/b&amp;gt;
	&amp;lt;b&amp;gt;def&amp;lt;/b&amp;gt;
	&amp;lt;c&amp;gt;123&amp;lt;/c&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;a name=&quot;author&quot; location=&quot;San Diego&quot;&amp;gt;
	&amp;lt;b&amp;gt;ghi&amp;lt;/b&amp;gt;
	&amp;lt;d&amp;gt;456&amp;lt;/d&amp;gt;
&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;With &lt;b&gt;Pad Attributes&lt;/b&gt; set to &lt;i&gt;False&lt;/i&gt;, these properties will be generated:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;a.name&lt;/b&gt;: Array with 2 items: [&apos;title&apos;, &apos;author&apos;]
&lt;li&gt;&lt;b&gt;a.source&lt;/b&gt;: String with 1 item: &apos;file&apos;
&lt;li&gt;&lt;b&gt;a.location&lt;/b&gt;: String with 1 item: &apos;San Diego&apos;
&lt;li&gt;&lt;b&gt;a/b&lt;/b&gt;: Array with 3 items: [&apos;abc&apos;, &apos;def&apos;, &apos;ghi&apos;]
&lt;li&gt;&lt;b&gt;a/c&lt;/b&gt;: Array with 3 items: [&apos;123&apos;, &apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;]
&lt;li&gt;&lt;b&gt;a/d&lt;/b&gt;: Array with 3 items: [&apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;, &apos;456&apos;]
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;With &lt;b&gt;Pad Attributes&lt;/b&gt; set to &lt;i&gt;True&lt;/i&gt;, these properties will be generated:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;a.name&lt;/b&gt;: Array with 3 items: [&apos;title&apos;, &apos;title&apos;, &apos;author&apos;]
&lt;li&gt;&lt;b&gt;a.source&lt;/b&gt;: Array with 3 items: [&apos;file&apos;, &apos;file&apos;, &apos;PADDING STRING&apos;]
&lt;li&gt;&lt;b&gt;a.location&lt;/b&gt;: Array with 3 items: [&apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;, &apos;San Diego&apos;]
&lt;li&gt;&lt;b&gt;a/b&lt;/b&gt;: Array with 3 items: [&apos;abc&apos;, &apos;def&apos;, &apos;ghi&apos;]
&lt;li&gt;&lt;b&gt;a/c&lt;/b&gt;: Array with 3 items: [&apos;123&apos;, &apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;]
&lt;li&gt;&lt;b&gt;a/d&lt;/b&gt;: Array with 3 items: [&apos;PADDING STRING&apos;, &apos;PADDING STRING&apos;, &apos;456&apos;]
&lt;/ul&gt;
</sci:help>
						<sci:enabledscript>SetDisabledDetails(&apos;Only enabled if Pad Missing Values is True and Preserve Hierarchy is false&apos;);
Parameter(&apos;Pad Missing Values&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval>ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Tue Oct 04 09:48:48 2011</sci:value>
					</sci:arg>
					<sci:arg name="OnlyGenericData" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>OnlyGenericData</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{93C4D73F-0B4D-03F4-B0E3-D82C4FE04C6F}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>XML Reader (Generic)</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>90 -570</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DOCUMENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>XML Reader (Generic)</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Reads data from generic XML files</sci:value>
						<sci:value>&lt;p&gt;This generic reader is designed for free-form XML from any source. The component reads the XML files specified by &lt;i&gt;Source&lt;/i&gt; and outputs data records in either a full hierarchical form or in a
flattened form with property names representing hierarchical paths.&lt;/p&gt;
&lt;p&gt;The XML is broken into separate records based on the value of &lt;i&gt;XML Repeat Tag&lt;/i&gt;. The XML between each of these tags up to its corresponding closing tag is treated as a single data record.&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Record Flattening&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
When &lt;i&gt;Preserve Hierarchy&lt;/i&gt; is set to False, the XML data is flattened into a single set of properties constructed by stringing together the element names delimited by a forward slash.
In this flattening case,  
&lt;i&gt;Pad Missing Values&lt;/i&gt; and its grouped parameters determine whether and how to fill in missing tags and attributes.&lt;/p&gt;
&lt;p&gt;
Where there are repeating XML elements within a data record, the text values with the same property name become items in a single array property.
&lt;/p&gt;&lt;p&gt;&lt;i&gt;Example input file:&lt;/i&gt;&lt;/p&gt;
Consider reading in the following XML:
&lt;code&gt;&lt;pre&gt;
&amp;lt;world&amp;gt;
  &amp;lt;region&amp;gt;
    &amp;lt;city&amp;gt;New York&amp;lt;/city&amp;gt;
  &amp;lt;/region&amp;gt;
  &amp;lt;region&amp;gt;
    &amp;lt;city&amp;gt;London&amp;lt;/city&amp;gt;
    &amp;lt;city&amp;gt;Berlin&amp;lt;/city&amp;gt;
    &amp;lt;city&amp;gt;Paris&amp;lt;/city&amp;gt;
  &amp;lt;/region&amp;gt;
  &amp;lt;region&amp;gt;
    &amp;lt;city&amp;gt;Tokyo&amp;lt;/city&amp;gt;
  &amp;lt;/region&amp;gt;
&amp;lt;/world&amp;gt;
&lt;/pre&gt;&lt;/code&gt;
&lt;p&gt;
If you specify &quot;region&quot; as the &lt;i&gt;XML Repeat Tag&lt;/i&gt;, then
this component splits the XML document into three records,
each containing a property named &lt;b&gt;world/region/city&lt;/b&gt;. 
In the case of the second record, this is a three-item 
array property.&lt;/p&gt;

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;i&gt;Preserve Hierarchy&lt;/i&gt; is False, XML attributes also become properties. In this case, the property name follows the same scheme as the text value properties, but the final attribute name is delimited by a period (&quot;.&quot;). For example, the element &lt;code&gt;&amp;lt;city latitude=&quot;40.77&quot;&amp;gt;&lt;/code&gt; would result in a property named &lt;b&gt;world/region/city.latitude&lt;/b&gt; with value &quot;40.77&quot;.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;XML Repeat Tag&lt;/i&gt; should include a prefix if there is one in the tag. For example, if the element is written as &lt;code&gt;&amp;lt;b:species&amp;gt;&lt;/code&gt;, define the tag as &quot;b:species&quot;.&lt;/li&gt;
&lt;li&gt;When encountering nested repeat tag elements, only the top level entry will be returned. For example, 
if the repeat tag is &quot;category&quot;, the following XML will return a single record:&lt;br&gt;
&lt;code&gt;
&amp;lt;category name=&amp;quot;sec1&amp;quot;&amp;gt;&amp;lt;category name=&amp;quot;sec1-3&amp;quot;&amp;gt;&amp;lt;/category&amp;gt;&amp;lt;/category&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Note that there is an &lt;i&gt;XML Writer (Generic)&lt;/i&gt; component
to write out an XML representation of the data records passed to it.&lt;/li&gt; 
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;For reading XML files in the SciTegic format, use &lt;a href=&quot;javascript:DoLink(&apos;{C887E992-CF11-42cd-B499-6B7F75D47D42}&apos;)&quot;&gt;XML Reader (SciTegic)&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>8.5.0.200</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>14</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\File Readers\XML Reader (Generic)</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.CountRecords.1">
				<sci:component name="Count and Index Data" version="2">
					<sci:arg name="Counter Property" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;The name of the property to hold the data record count. If the name begins with &quot;@&quot;, this is a global property name and is updated each time a data record is received. Otherwise, it is a local property name and a new property by that name will be created on each data record and given the current value (i.e., the count).&lt;/p&gt;

</sci:help>
						<sci:member>Start Index</sci:member>
						<sci:member>Check if Property Already in Use</sci:member>
						<sci:value>Index</sci:value>
					</sci:arg>
					<sci:arg name="Start Index" type="LongType" required="true" visibility="visible" multi="false">
						<sci:help>The index (i.e., number) used to start the sequence.</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="Check if Property Already in Use" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>Generates an error if the property already exists. This helps prevent overwriting data created by another component. Default is &quot;True&quot;.
</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Fri Sep 08 07:31:45 2006</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{7BF3D951-BF75-70A2-8B2C-AD8909791909}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Count and Index Data</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>COMPONENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Count and Index Data</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>378 -570</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Counts the number of data records and puts the count in a property</sci:value>
						<sci:value>&lt;p&gt;Use this component to create a numerical index of data records and to keep track of the total number of records.  The value of &lt;i&gt;Counter Property&lt;/i&gt; is incremented each time a data record enters the component.&lt;/p&gt;

&lt;p&gt;This component can be used in two modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;i&gt;Counter Property&lt;/i&gt; is the name of a local property (does not start with &quot;@&quot;), a new property by that name is created on each data record and given the value of the current count.&lt;/li&gt;
&lt;li&gt;If &lt;i&gt;Counter Property&lt;/i&gt; is the name of a global property (starts with &quot;@&quot;), then each data record that passes through causes this global record count to be incremented, but values are not added to the passing records.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>6.0.0.44</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>15</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Manipulators\Count and Index Data</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:connectid from="5" to="6" type="true"/>
			<sci:connectid from="6" to="7" type="true"/>
			<sci:connectid from="7" to="30" type="true"/>
			<sci:connectid from="30" to="28" type="true"/>
			<sci:connectid from="28" to="27" type="true"/>
			<sci:connectid from="27" to="9" type="true"/>
			<sci:connectid from="9" to="18" type="true"/>
			<sci:connectid from="18" to="19" type="true"/>
			<sci:connectid from="19" to="20" type="true"/>
			<sci:connectid from="20" to="22" type="true"/>
			<sci:connectid from="22" to="25" type="true"/>
			<sci:connectid from="14" to="15" type="true"/>
			<sci:connectid from="15" to="7" type="true"/>
			<sci:version iVal="1"/>
		</sci:protocol>
	</sci:dbitem>
<!-- Exported protocol -->
<sci:component name="8.0 Protocol Warning" version="2">
<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
<sci:help>Component Icon</sci:help>
<sci:value>PROTOCOLNODE</sci:value>
</sci:arg>
<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
<sci:help>Protocol Sticky Notes</sci:help>
<sci:value>%VERSION 3%</sci:value>
<sci:value>400 -219 1222 221</sci:value>
<sci:value>250 120 20</sci:value>
<sci:value>WARNING! This is a Pipeline Pilot protocol written in version 8.0 or later. It contains features that are not supported in earlier versions of Pipeline Pilot.</sci:value>
</sci:arg>
</sci:component>
</sci:data>
